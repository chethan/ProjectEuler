#Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2,
#the first 10 terms will be:
#1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
#Find the sum of all the even-valued terms in the sequence which do not exceed four million.

class Problem_Two
    TARGET=4000000

    def self.mine

        fib1=1;
        fib2=2;
        fib3=3;
        sum=2;
        while fib3< TARGET
            sum+=fib3 if (fib3 %2 ==0)
            fib3=fib2+fib1;
            fib1=fib2;
            fib2=fib3;
        end
        p sum
        
    end

    def self.euler
        fib1=1;
        fib2=1;
        fib3=2;
        sum=0;
        while fib3< TARGET
            sum+=fib3
            fib1=fib2+fib3;
            fib2=fib3+fib1;
            fib3=fib1+fib2;
        end
        p sum

    end

    def self.euler_recursive
        sum=0;
        index=3;

        while true
            temp=e(index)
            break unless temp < TARGET
            sum+=temp
            index+=1
        end
        p sum

    end

    def self.e (index)
       return 2 if index==1
       return 8 if index==2;
       return 4* e(index-1) + e(index -2)
    end


    def self.sum_divisable_by(n)
        p=(TARGET/n)
        n *p *(p+1) / 2
    end

end

Problem_Two.mine
Problem_Two.euler
Problem_Two.euler_recursive


